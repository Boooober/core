{"fileName":"common/Observer.sol","name":"Observer","abi":[{"constant":false,"inputs":[{"name":"_event","type":"uint256"},{"name":"_data","type":"bytes32[]"}],"name":"eventHandle","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"bin":"6060604052341561000c57fe5b5b60e88061001b6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633ae6c4a414603a575bfe5b3415604157fe5b609560048080359060200190919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190505060af565b604051808215151515815260200191505060405180910390f35b6000600190505b929150505600a165627a7a7230582025e7d0ff4e6f4c204effdcda3e0640372c3f90ecb98c749bf73ef8f669b26c420029","opcodes":"PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH2 0xC JUMPI INVALID JUMPDEST JUMPDEST PUSH1 0xE8 DUP1 PUSH2 0x1B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x3AE6C4A4 EQ PUSH1 0x3A JUMPI JUMPDEST INVALID JUMPDEST CALLVALUE ISZERO PUSH1 0x41 JUMPI INVALID JUMPDEST PUSH1 0x95 PUSH1 0x4 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 POP POP PUSH1 0xAF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 SHA3 0x25 0xe7 0xd0 SELFDESTRUCT 0x4e PUSH16 0x4C204EFFDCDA3E0640372C3F90ECB98C PUSH21 0x9BF73EF8F669B26C42002900000000000000000000 ","source":"pragma solidity ^0.4.4;\n\ncontract Observer {\n    /**\n     * @dev Handle observable contract event\n     * @param _event Event type\n     * @param _data Event data\n     * @return `true` if success done\n     */\n    function eventHandle(uint _event, bytes32[] _data) returns (bool)\n    { return true; }\n}\n\ncontract Observable {\n    mapping(uint => Observer[]) private _observers;\n\n    /**\n     * @dev Notify observers \n     * @param _event Event type\n     * @notice Potentialy DoS vulnerable by observer contract, be carefull\n     */\n    function notify(uint _event, bytes32[] _data) internal returns (bool) {\n        for (uint i = 0; i < _observers[_event].length; ++i)\n            if (!_observers[_event][i].eventHandle(_event, _data)) throw;\n        return true;\n    }\n\n    /**\n     * @dev Append new observer\n     * @param _event Event type\n     * @param _observer Target address\n     */\n    function addObserver(uint _event, Observer _observer) internal\n    { _observers[_event].push(_observer); }\n}\n","abiDocs":[{"constant":false,"inputs":[{"name":"_event","type":"uint256","description":"Event type"},{"name":"_data","type":"bytes32[]","description":"Event data"}],"name":"eventHandle","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function","details":"Handle observable contract event","return":"`true` if success done","signature":"eventHandle(uint256,bytes32[])","signatureHash":"3ae6c4a4"}]}
